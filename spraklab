<!doctype html>
<html lang="sv">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Spr√•kstudio ‚Äì √ñva engelska och tyska</title>
  <meta name="description" content="√ñvningar i engelska och tyska f√∂r √•rskurs 6‚Äì9: glosor, quiz, diktamen och uttal ‚Äì allt lokalt i webbl√§saren (GDPR‚Äëv√§nligt)." />
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    /* Minimal focus ring tweak for better accessibility */
    :focus-visible { outline: 3px solid #4f46e5; outline-offset: 2px; }
  </style>
</head>
<body class="bg-slate-50 text-slate-900">
  <header class="sticky top-0 z-50 bg-white/80 backdrop-blur border-b border-slate-200">
    <div class="max-w-6xl mx-auto px-4 py-3 flex items-center justify-between">
      <div class="flex items-center gap-3">
        <span class="inline-flex h-9 w-9 items-center justify-center rounded-xl bg-indigo-600 text-white font-semibold">S</span>
        <div>
          <h1 class="text-lg font-semibold leading-tight">Spr√•kstudio</h1>
          <p class="text-xs text-slate-500">√Ök 6‚Äì9 ‚Ä¢ Engelska & Tyska</p>
        </div>
      </div>
      <nav aria-label="Huvudnavigation" class="hidden sm:flex items-center gap-6 text-sm">
        <a href="#start" class="hover:text-indigo-700">Hem</a>
        <a href="#ovningar" class="hover:text-indigo-700">√ñvningar</a>
        <a href="#flashcards" class="hover:text-indigo-700">Glosor</a>
        <a href="#quiz" class="hover:text-indigo-700">Quiz</a>
        <a href="#diktamen" class="hover:text-indigo-700">Diktamen</a>
        <a href="#uttal" class="hover:text-indigo-700">Uttal</a>
        <a href="#larare" class="hover:text-indigo-700">L√§rarinst√§llningar</a>
      </nav>
      <button id="menuBtn" class="sm:hidden rounded-xl border px-3 py-2 text-sm" aria-controls="mobileMenu" aria-expanded="false">Meny</button>
    </div>
    <div id="mobileMenu" class="sm:hidden hidden border-t border-slate-200">
      <div class="max-w-6xl mx-auto px-4 py-3 flex flex-col gap-2 text-sm">
        <a href="#start" class="py-1">Hem</a>
        <a href="#ovningar" class="py-1">√ñvningar</a>
        <a href="#flashcards" class="py-1">Glosor</a>
        <a href="#quiz" class="py-1">Quiz</a>
        <a href="#diktamen" class="py-1">Diktamen</a>
        <a href="#uttal" class="py-1">Uttal</a>
        <a href="#larare" class="py-1">L√§rarinst√§llningar</a>
      </div>
    </div>
  </header>

  <main id="start" class="max-w-6xl mx-auto px-4 py-8">
    <section class="grid md:grid-cols-2 gap-6 items-center">
      <div>
        <h2 class="text-2xl md:text-3xl font-bold mb-3">V√§lkommen till Spr√•kstudio</h2>
        <p class="mb-4 text-slate-700">H√§r kan du √∂va <strong>glosor</strong>, g√∂ra <strong>quiz</strong>, tr√§na <strong>diktamen</strong> och testa <strong>uttal</strong>. Allt sparas <em>lokalt i din webbl√§sare</em> (ingen inloggning beh√∂vs).</p>
        <div class="flex flex-wrap gap-3">
          <a href="#flashcards" class="rounded-2xl bg-indigo-600 text-white px-4 py-2 text-sm font-medium shadow">B√∂rja med glosor</a>
          <a href="#quiz" class="rounded-2xl border border-indigo-600 text-indigo-700 px-4 py-2 text-sm font-medium">G√∂r ett quiz</a>
        </div>
      </div>
      <div class="p-4 bg-white rounded-2xl shadow border">
        <dl class="grid grid-cols-2 gap-4 text-sm">
          <div>
            <dt class="text-slate-500">Dagens √∂vningar</dt>
            <dd id="todayCount" class="text-xl font-semibold">‚Äì</dd>
          </div>
          <div>
            <dt class="text-slate-500">Avklarade denna vecka</dt>
            <dd id="weeklyCount" class="text-xl font-semibold">‚Äì</dd>
          </div>
          <div>
            <dt class="text-slate-500">Senast bes√∂kt</dt>
            <dd id="lastVisit" class="text-xl font-semibold">‚Äì</dd>
          </div>
          <div>
            <dt class="text-slate-500">Sparl√§ge</dt>
            <dd class="text-xl font-semibold">Lokal (GDPR‚Äëv√§nligt)</dd>
          </div>
        </dl>
      </div>
    </section>

    <section id="ovningar" class="mt-10">
      <h3 class="text-xl font-bold mb-3">√ñvningsbank</h3>
      <div class="grid md:grid-cols-3 gap-4" id="exerciseBank">
        <!-- Cards will be injected here -->
      </div>
    </section>

    <!-- Flashcards -->
    <section id="flashcards" class="mt-12">
      <div class="flex items-center justify-between mb-3">
        <h3 class="text-xl font-bold">Glosor (Flashcards)</h3>
        <div class="flex items-center gap-2 text-sm">
          <label for="deckSelect" class="text-slate-600">V√§lj gloslista</label>
          <select id="deckSelect" class="rounded-xl border px-2 py-1"></select>
        </div>
      </div>
      <div class="bg-white rounded-2xl border shadow p-4">
        <div id="flashcard" class="h-40 md:h-56 flex items-center justify-center text-center text-xl md:text-2xl font-semibold rounded-xl border bg-slate-50 select-none p-4" role="button" aria-label="Kort" tabindex="0">‚Äî</div>
        <div class="flex items-center justify-between mt-4 gap-2">
          <div class="flex items-center gap-2">
            <button id="btnDidntKnow" class="rounded-2xl border px-4 py-2">‚ùå Sv√•rt</button>
            <button id="btnKnew" class="rounded-2xl bg-green-600 text-white px-4 py-2">‚úÖ Kunde</button>
            <button id="btnFlip" class="rounded-2xl border px-4 py-2">‚§æ V√§nd</button>
          </div>
          <div class="text-sm text-slate-600">
            <span id="cardProgress">0 / 0</span>
          </div>
        </div>
      </div>
      <p class="mt-2 text-xs text-slate-500">Tip: Tryck <kbd>mellanslag</kbd> f√∂r att v√§nda kortet, <kbd>1</kbd> = Sv√•rt, <kbd>2</kbd> = Kunde.</p>
    </section>

    <!-- Quiz -->
    <section id="quiz" class="mt-12">
      <div class="flex items-center justify-between mb-3">
        <h3 class="text-xl font-bold">Quiz</h3>
        <div class="flex items-center gap-2 text-sm">
          <label for="quizSelect" class="text-slate-600">V√§lj quiz</label>
          <select id="quizSelect" class="rounded-xl border px-2 py-1"></select>
        </div>
      </div>
      <div class="bg-white rounded-2xl border shadow p-4" id="quizArea">
        <p class="text-slate-600">V√§lj ett quiz f√∂r att b√∂rja.</p>
      </div>
    </section>

    <!-- Dictation -->
    <section id="diktamen" class="mt-12">
      <h3 class="text-xl font-bold mb-3">Diktamen</h3>
      <div class="bg-white rounded-2xl border shadow p-4">
        <p class="text-sm text-slate-600 mb-2">Lyssna och skriv meningen exakt. Klicka p√• h√∂gtalaren igen om du vill h√∂ra om.</p>
        <div class="flex items-center gap-2 mb-3">
          <select id="dictationSelect" class="rounded-xl border px-2 py-1"></select>
          <button id="btnSpeak" class="rounded-2xl border px-4 py-2">üîä Spela upp</button>
        </div>
        <input id="dictationInput" type="text" class="w-full rounded-xl border px-3 py-2" placeholder="Skriv h√§r..." />
        <div class="mt-3 flex items-center gap-2">
          <button id="btnCheckDictation" class="rounded-2xl bg-indigo-600 text-white px-4 py-2">Kontrollera</button>
          <span id="dictationFeedback" class="text-sm"></span>
        </div>
      </div>
      <p class="mt-2 text-xs text-slate-500">Text‚Äëto‚Äëspeech anv√§nder din webbl√§sare. Chrome/Edge fungerar b√§st.</p>
    </section>

    <!-- Pronunciation -->
    <section id="uttal" class="mt-12">
      <h3 class="text-xl font-bold mb-3">Uttal</h3>
      <div class="bg-white rounded-2xl border shadow p-4">
        <p class="text-sm text-slate-600 mb-2">S√§g frasen och l√•t datorn f√∂rs√∂ka k√§nna igen den. St√∂d varierar mellan webbl√§sare.</p>
        <div class="flex items-center gap-2 mb-3">
          <select id="speakSelect" class="rounded-xl border px-2 py-1"></select>
          <button id="btnListen" class="rounded-2xl border px-4 py-2">üéß H√∂r frasen</button>
        </div>
        <div class="flex items-center gap-2">
          <button id="btnStartRec" class="rounded-2xl bg-green-600 text-white px-4 py-2">üéôÔ∏è Starta inspelning</button>
          <button id="btnStopRec" class="rounded-2xl border px-4 py-2">üõë Stoppa</button>
        </div>
        <div class="mt-3 text-sm">
          <div>Uppfattat: <span id="heardText" class="font-mono"></span></div>
          <div>Resultat: <span id="pronFeedback" class="font-semibold"></span></div>
        </div>
      </div>
      <p class="mt-2 text-xs text-slate-500">Om r√∂stigenk√§nning inte st√∂ds visas ett meddelande.</p>
    </section>

    <!-- Teacher settings -->
    <section id="larare" class="mt-12">
      <h3 class="text-xl font-bold mb-3">L√§rarinst√§llningar</h3>
      <div class="bg-white rounded-2xl border shadow p-4">
        <p class="text-sm text-slate-600 mb-3">All data sparas lokalt i elevernas webbl√§sare. Du kan ge dem en l√§nk till en f√§rdig lista/quiz genom att v√§lja h√§r och kopiera URL:en (parametrar i adressf√§ltet).</p>
        <div class="grid md:grid-cols-2 gap-4">
          <div>
            <label class="block text-sm mb-1" for="classFilter">Visa inneh√•ll f√∂r √•rskurs</label>
            <select id="classFilter" class="w-full rounded-xl border px-2 py-1">
              <option value="all">Alla</option>
              <option value="6">√Ök 6</option>
              <option value="7">√Ök 7</option>
              <option value="8">√Ök 8</option>
              <option value="9">√Ök 9</option>
            </select>
          </div>
          <div>
            <label class="block text-sm mb-1" for="skillFilter">F√§rdighet</label>
            <select id="skillFilter" class="w-full rounded-xl border px-2 py-1">
              <option value="all">Alla</option>
              <option value="vocab">Glosor</option>
              <option value="grammar">Grammatik</option>
              <option value="listening">Lyssna</option>
              <option value="speaking">Tala</option>
            </select>
          </div>
        </div>
        <div class="mt-4 text-sm">Direktl√§nk: <code id="deepLink" class="px-2 py-1 bg-slate-100 rounded">‚Äî</code></div>
      </div>
      <p class="mt-2 text-xs text-slate-500">Tips: L√§gg sidan i skolans LMS/Google Classroom/Teams som uppgift. Ingen inloggning kr√§vs.</p>
    </section>

    <footer class="mt-16 py-8 text-center text-xs text-slate-500">
      ¬© <span id="year"></span> Spr√•kstudio ‚Ä¢ Allt material lokalt. Ingen sp√•rning, inga cookies.
    </footer>
  </main>

  <script>
    // --- Content definitions (EDIT THESE) --- //

    // Flashcard decks (examples). Keys are deck ids.
    const DECKS = {
      'de_schule_√•k6': {
        title: 'Tyska √•k 6 ‚Äì I klassrummet', level: '6', skill: 'vocab', lang: 'de-DE',
        cards: [
          { front: 'der Bleistift', back: 'pencil' },
          { front: 'der Radiergummi', back: 'eraser' },
          { front: 'das Heft', back: 'exercise book' },
          { front: 'das Buch', back: 'book' },
          { front: 'die Tafel', back: 'blackboard' },
          { front: 'der Lehrer / die Lehrerin', back: 'teacher (m/f)' },
          { front: 'die Hausaufgabe', back: 'homework' },
        ],
      },
      'en_food_√•k7': {
        title: 'Engelska √•k 7 ‚Äì Food', level: '7', skill: 'vocab', lang: 'en-GB',
        cards: [
          { front: 'vegetables', back: 'gr√∂nsaker' },
          { front: 'fruit', back: 'frukt' },
          { front: 'dairy', back: 'mejeriprodukter' },
          { front: 'protein', back: 'protein' },
          { front: 'grains', back: 'spannm√•l' },
        ],
      },
    };

    // Quizzes (examples). Each quiz has questions with options and a correct index.
    const QUIZZES = {
      'en_past_simple_√•k8': {
        title: 'Engelska √•k 8 ‚Äì Past simple', level: '8', skill: 'grammar', lang: 'en-GB',
        questions: [
          { q: 'We ____ to the park yesterday.', options: ['go', 'went', 'gone', 'were going'], answer: 1 },
          { q: 'She ____ a movie last night.', options: ['watch', 'watched', 'watches', 'was watching'], answer: 1 },
          { q: 'They ____ at home on Sunday.', options: ['stayed', 'stays', 'stay', 'were stay'], answer: 0 },
        ]
      },
      'de_prasens_√•k6': {
        title: 'Tyska √•k 6 ‚Äì Pr√§sens av sein/haben', level: '6', skill: 'grammar', lang: 'de-DE',
        questions: [
          { q: 'Ich ____ 13 Jahre alt.', options: ['hast', 'bin', 'seid', 'ist'], answer: 1 },
          { q: 'Wir ____ eine Katze.', options: ['haben', 'seid', 'ist', 'habe'], answer: 0 },
          { q: 'Ihr ____ freundlich.', options: ['seien', 'habt', 'seid', 'bist'], answer: 2 },
        ]
      }
    };

    // Dictation sentences (examples). Language will be used for TTS voice selection.
    const DICTATIONS = {
      'en_easy_√•k6': {
        title: 'Engelska √•k 6 ‚Äì Easy dictation', level: '6', skill: 'listening', lang: 'en-GB',
        items: [
          'This is my school.',
          'We read books every day.',
          'Please open the window.'
        ]
      },
      'de_alltag_√•k7': {
        title: 'Tyska √•k 7 ‚Äì Alltag', level: '7', skill: 'listening', lang: 'de-DE',
        items: [
          'Ich hei√üe Anna und komme aus Schweden.',
          'Wir fahren morgen nach Berlin.',
          'Kannst du bitte langsam sprechen?'
        ]
      }
    };

    // Pronunciation practice phrases.
    const PHRASES = {
      'en_polite_√•k8': { title: 'Engelska √•k 8 ‚Äì Polite requests', level: '8', skill: 'speaking', lang: 'en-GB', items: [
        'Could you help me, please?',
        'I would like a glass of water.',
        'Where is the nearest bus stop?'
      ]},
      'de_vorstellen_√•k6': { title: 'Tyska √•k 6 ‚Äì Sich vorstellen', level: '6', skill: 'speaking', lang: 'de-DE', items: [
        'Ich hei√üe Alex.',
        'Ich komme aus Schweden.',
        'Ich bin dreizehn Jahre alt.'
      ]}
    };

    // --- End content definitions --- //

    // Utility: storage keys
    const STORAGE = {
      visit: 'sprakstudio_visit',
      weekly: 'sprakstudio_weekly',
      deckState: (id) => `sprakstudio_deck_${id}`,
      quizScore: (id) => `sprakstudio_quiz_${id}`,
    };

    // Menu toggle
    const menuBtn = document.getElementById('menuBtn');
    const mobileMenu = document.getElementById('mobileMenu');
    menuBtn?.addEventListener('click', () => {
      const open = mobileMenu.classList.toggle('hidden');
      const expanded = !open;
      menuBtn.setAttribute('aria-expanded', String(expanded));
    });

    // Footer year
    document.getElementById('year').textContent = new Date().getFullYear();

    // Stats (local, privacy‚Äëfriendly)
    function getWeekKey(d=new Date()){
      const onejan = new Date(d.getFullYear(),0,1);
      const days = Math.floor((d - onejan) / 86400000);
      return `${d.getFullYear()}-w${Math.ceil((d.getDay()+1+days)/7)}`;
    }
    function bumpToday(){
      const visit = JSON.parse(localStorage.getItem(STORAGE.visit) || '{}');
      const today = new Date().toISOString().slice(0,10);
      visit.last = today;
      visit[today] = (visit[today] || 0) + 1;
      localStorage.setItem(STORAGE.visit, JSON.stringify(visit));
      const weekly = JSON.parse(localStorage.getItem(STORAGE.weekly) || '{}');
      const wk = getWeekKey();
      weekly[wk] = (weekly[wk] || 0) + 1;
      localStorage.setItem(STORAGE.weekly, JSON.stringify(weekly));
    }
    function renderStats(){
      const visit = JSON.parse(localStorage.getItem(STORAGE.visit) || '{}');
      const weekly = JSON.parse(localStorage.getItem(STORAGE.weekly) || '{}');
      const today = new Date().toISOString().slice(0,10);
      document.getElementById('todayCount').textContent = visit[today] || 0;
      const wk = getWeekKey();
      document.getElementById('weeklyCount').textContent = weekly[wk] || 0;
      document.getElementById('lastVisit').textContent = visit.last || '‚Äî';
    }
    bumpToday();
    renderStats();

    // Build Exercise Bank cards from all content
    function buildExerciseBank(){
      const container = document.getElementById('exerciseBank');
      const entries = [];
      for (const [id, deck] of Object.entries(DECKS)) entries.push({ id, title: deck.title, level: deck.level, skill: deck.skill, type: 'vocab' });
      for (const [id, quiz] of Object.entries(QUIZZES)) entries.push({ id, title: quiz.title, level: quiz.level, skill: quiz.skill, type: 'quiz' });
      for (const [id, dic] of Object.entries(DICTATIONS)) entries.push({ id, title: dic.title, level: dic.level, skill: dic.skill, type: 'dictation' });
      for (const [id, phr] of Object.entries(PHRASES)) entries.push({ id, title: phr.title, level: phr.level, skill: phr.skill, type: 'speaking' });

      const classFilter = document.getElementById('classFilter');
      const skillFilter = document.getElementById('skillFilter');

      function render(){
        container.innerHTML = '';
        const cf = classFilter.value;
        const sf = skillFilter.value;
        for (const e of entries){
          if (cf !== 'all' && e.level !== cf) continue;
          if (sf !== 'all' && e.skill !== sf) continue;
          const card = document.createElement('article');
          card.className = 'rounded-2xl bg-white border shadow p-4 flex flex-col gap-2';
          card.innerHTML = `
            <div class="text-xs text-slate-500">√Ök ${e.level} ‚Ä¢ ${e.skill.toUpperCase()}</div>
            <h4 class="font-semibold">${e.title}</h4>
            <div class="mt-auto flex gap-2">
              <a class="rounded-xl border px-3 py-2 text-sm" href="${deepLinkFor(e)}">√ñppna</a>
            </div>
          `;
          container.appendChild(card);
        }
      }

      classFilter.addEventListener('change', () => { render(); updateDeepLink(); });
      skillFilter.addEventListener('change', () => { render(); updateDeepLink(); });
      render();
    }

    // Deep link helper
    function deepLinkFor(entry){
      let url = new URL(location.href);
      url.hash = '#start';
      url.searchParams.delete('deck');
      url.searchParams.delete('quiz');
      url.searchParams.delete('dict');
      url.searchParams.delete('speak');
      if (entry.type === 'vocab') url.searchParams.set('deck', entry.id);
      if (entry.type === 'quiz') url.searchParams.set('quiz', entry.id);
      if (entry.type === 'dictation') url.searchParams.set('dict', entry.id);
      if (entry.type === 'speaking') url.searchParams.set('speak', entry.id);
      return url.toString();
    }
    function updateDeepLink(){
      const cf = document.getElementById('classFilter').value;
      const sf = document.getElementById('skillFilter').value;
      const url = new URL(location.href);
      url.searchParams.set('class', cf);
      url.searchParams.set('skill', sf);
      document.getElementById('deepLink').textContent = url.toString();
    }

    // --- Flashcards logic (very simple spaced repetition) --- //
    let currentDeckId = null;
    let deckOrder = [];
    let showFront = true;

    function initDeckSelect(){
      const select = document.getElementById('deckSelect');
      select.innerHTML = Object.entries(DECKS)
        .map(([id, d]) => `<option value="${id}">${d.title}</option>`)
        .join('');
      select.addEventListener('change', () => loadDeck(select.value));
      const urlDeck = new URLSearchParams(location.search).get('deck');
      loadDeck(urlDeck && DECKS[urlDeck] ? urlDeck : select.value);
    }

    function loadDeck(id){
      currentDeckId = id;
      document.getElementById('deckSelect').value = id;
      const state = JSON.parse(localStorage.getItem(STORAGE.deckState(id)) || '{}');
      // level: 1 (new), 2 (learning), 3 (mastered). Default 1.
      const levels = state.levels || Array(DECKS[id].cards.length).fill(1);
      state.levels = levels;
      localStorage.setItem(STORAGE.deckState(id), JSON.stringify(state));
      // Build order: show lower levels more often
      deckOrder = levels
        .map((lvl, idx) => ({ idx, weight: 4 - lvl }))
        .filter(o => o.weight > 0)
        .flatMap(o => Array(o.weight).fill(o.idx));
      if (deckOrder.length === 0) deckOrder = [0];
      nextCard();
      updateCardProgress();
      history.replaceState(null, '', deepLinkFor({id, type:'vocab', skill:'vocab'}));
    }

    function updateCardProgress(){
      const state = JSON.parse(localStorage.getItem(STORAGE.deckState(currentDeckId)) || '{}');
      const levels = state.levels || [];
      const mastered = levels.filter(l => l >= 3).length;
      const total = (DECKS[currentDeckId]?.cards?.length) || 0;
      document.getElementById('cardProgress').textContent = `${mastered} / ${total} klara`;
    }

    let currentCardIndex = 0;
    function nextCard(){
      if (!DECKS[currentDeckId]) return;
      const pool = deckOrder.length ? deckOrder : [0];
      const rand = Math.floor(Math.random() * pool.length);
      currentCardIndex = pool[rand];
      showFront = true;
      renderFlashcard();
    }

    function renderFlashcard(){
      const el = document.getElementById('flashcard');
      const card = DECKS[currentDeckId].cards[currentCardIndex];
      el.textContent = showFront ? card.front : card.back;
    }

    function flipCard(){ showFront = !showFront; renderFlashcard(); }

    function mark(know){
      const key = STORAGE.deckState(currentDeckId);
      const state = JSON.parse(localStorage.getItem(key) || '{}');
      const levels = state.levels || Array(DECKS[currentDeckId].cards.length).fill(1);
      const cur = levels[currentCardIndex] || 1;
      levels[currentCardIndex] = Math.max(1, Math.min(3, cur + (know ? 1 : -1)));
      state.levels = levels;
      localStorage.setItem(key, JSON.stringify(state));
      updateCardProgress();
      nextCard();
    }

    document.getElementById('btnFlip').addEventListener('click', flipCard);
    document.getElementById('btnKnew').addEventListener('click', () => mark(true));
    document.getElementById('btnDidntKnow').addEventListener('click', () => mark(false));
    document.getElementById('flashcard').addEventListener('click', flipCard);
    document.getElementById('flashcard').addEventListener('keydown', (e)=>{ if(e.code==='Space'){ e.preventDefault(); flipCard(); } });
    window.addEventListener('keydown', (e)=>{
      if(document.activeElement.tagName.toLowerCase()==='input') return;
      if(e.code==='Space'){ e.preventDefault(); flipCard(); }
      if(e.key==='1') mark(false);
      if(e.key==='2') mark(true);
    });

    // --- Quiz logic --- //
    function initQuizSelect(){
      const select = document.getElementById('quizSelect');
      select.innerHTML = Object.entries(QUIZZES)
        .map(([id, q]) => `<option value="${id}">${q.title}</option>`)
        .join('');
      select.addEventListener('change', () => loadQuiz(select.value));
      const urlQuiz = new URLSearchParams(location.search).get('quiz');
      loadQuiz(urlQuiz && QUIZZES[urlQuiz] ? urlQuiz : select.value);
    }

    function loadQuiz(id){
      const qz = QUIZZES[id];
      const area = document.getElementById('quizArea');
      if (!qz){ area.innerHTML = '<p class="text-slate-600">Inget quiz.</p>'; return; }
      let index = 0; let score = 0;
      function render(){
        const total = qz.questions.length;
        if(index >= total){
          localStorage.setItem(STORAGE.quizScore(id), JSON.stringify({ score, total, date: Date.now() }));
          area.innerHTML = `
            <div class="text-center">
              <h4 class="text-lg font-semibold mb-2">Resultat</h4>
              <p class="mb-4">${score} / ${total} r√§tt</p>
              <button class="rounded-2xl border px-4 py-2" id="btnRetry">F√∂rs√∂k igen</button>
            </div>`;
          document.getElementById('btnRetry').addEventListener('click', ()=>{ index=0; score=0; render(); });
          return;
        }
        const item = qz.questions[index];
        area.innerHTML = `
          <div>
            <div class="flex items-center justify-between mb-2 text-sm text-slate-600">
              <div>Fr√•ga ${index+1} / ${total}</div>
              <div>Po√§ng: ${score}</div>
            </div>
            <p class="text-lg font-medium mb-3">${item.q}</p>
            <div class="grid gap-2">${item.options.map((opt,i)=>`
              <button class="rounded-xl border px-4 py-2 text-left hover:bg-slate-50" data-i="${i}">${opt}</button>
            `).join('')}</div>
          </div>`;
        area.querySelectorAll('button[data-i]').forEach(btn => btn.addEventListener('click', (e)=>{
          const i = Number(e.currentTarget.getAttribute('data-i'));
          if(i === item.answer){ score++; }
          index++;
          render();
        }));
      }
      render();
      history.replaceState(null, '', deepLinkFor({id, type:'quiz', skill:'grammar'}));
    }

    // --- Dictation (TTS) --- //
    function initDictation(){
      const select = document.getElementById('dictationSelect');
      select.innerHTML = Object.entries(DICTATIONS)
        .map(([id, d]) => `<option value="${id}">${d.title}</option>`)
        .join('');
      const urlDict = new URLSearchParams(location.search).get('dict');
      select.value = (urlDict && DICTATIONS[urlDict]) ? urlDict : select.value;
      document.getElementById('btnSpeak').addEventListener('click', speakDictation);
      document.getElementById('btnCheckDictation').addEventListener('click', checkDictation);
    }

    function currentDict(){ return DICTATIONS[document.getElementById('dictationSelect').value]; }
    function speakDictation(){
      const d = currentDict(); if(!d) return;
      const items = d.items;
      const sentence = items[Math.floor(Math.random()*items.length)];
      const utter = new SpeechSynthesisUtterance(sentence);
      utter.lang = d.lang;
      speechSynthesis.speak(utter);
      document.getElementById('dictationInput').value = '';
      document.getElementById('dictationInput').dataset.target = sentence;
    }
    function normalize(s){ return s.toLowerCase().replace(/[^a-zA-Z√§√∂√º√Ñ√ñ√ú√ü√•√§√∂\s]/g,'').trim().replace(/\s+/g,' '); }
    function checkDictation(){
      const inp = document.getElementById('dictationInput');
      const target = normalize(inp.dataset.target || '');
      const attempt = normalize(inp.value || '');
      const fb = document.getElementById('dictationFeedback');
      if(!target){ fb.textContent = 'Klicka p√• Spela upp f√∂rst.'; fb.className='text-sm text-amber-700'; return; }
      if(attempt===target){ fb.textContent = 'R√§tt!'; fb.className='text-sm text-green-700 font-semibold'; }
      else { fb.textContent = 'N√§stan ‚Äì j√§mf√∂r och r√§tta.'; fb.className='text-sm text-rose-700 font-semibold'; }
    }

    // --- Pronunciation (SpeechRecognition) --- //
    let rec = null; let recActive = false; let expectedPhrase = '';
    function initSpeaking(){
      const select = document.getElementById('speakSelect');
      select.innerHTML = Object.entries(PHRASES)
        .map(([id, d]) => `<option value="${id}">${d.title}</option>`)
        .join('');
      const urlSpeak = new URLSearchParams(location.search).get('speak');
      select.value = (urlSpeak && PHRASES[urlSpeak]) ? urlSpeak : select.value;

      document.getElementById('btnListen').addEventListener('click', () => {
        const data = PHRASES[select.value];
        expectedPhrase = data.items[Math.floor(Math.random()*data.items.length)];
        const u = new SpeechSynthesisUtterance(expectedPhrase);
        u.lang = data.lang;
        speechSynthesis.speak(u);
      });

      const SR = window.SpeechRecognition || window.webkitSpeechRecognition;
      if(!SR){
        document.getElementById('pronFeedback').textContent = 'R√∂stigenk√§nning st√∂ds inte i denna webbl√§sare.';
        document.getElementById('btnStartRec').disabled = true;
        document.getElementById('btnStopRec').disabled = true;
        return;
      }
      rec = new SR();
      rec.continuous = false; rec.interimResults = false; rec.lang = 'en-GB'; // language will be set dynamically

      document.getElementById('btnStartRec').addEventListener('click', () => {
        const data = PHRASES[select.value];
        rec.lang = data.lang;
        document.getElementById('heardText').textContent = '';
        document.getElementById('pronFeedback').textContent = 'Lyssnar...';
        try { rec.start(); recActive = true; } catch(e) {}
      });
      document.getElementById('btnStopRec').addEventListener('click', () => { try { rec.stop(); } catch(e) {} recActive = false; });

      rec.onresult = (e)=>{
        const text = e.results[0][0].transcript;
        document.getElementById('heardText').textContent = text;
        const ok = normalize(text) === normalize(expectedPhrase);
        document.getElementById('pronFeedback').textContent = ok ? 'Snyggt ‚Äì matchar frasen!' : 'F√∂rs√∂k igen. Lyssna och upprepa.';
      };
      rec.onerror = ()=>{ document.getElementById('pronFeedback').textContent = 'Fel uppstod. Prova igen.'; };
      rec.onend = ()=>{ recActive = false; };
    }

    // Init selects and lists
    initDeckSelect();
    initQuizSelect();
    initDictation();
    initSpeaking();
    buildExerciseBank();
    updateDeepLink();

    // Apply URL filters on load
    (function applyURLFilters(){
      const sp = new URLSearchParams(location.search);
      const c = sp.get('class');
      const s = sp.get('skill');
      if (c && document.getElementById('classFilter').querySelector(`option[value="${c}"]`)) document.getElementById('classFilter').value = c;
      if (s && document.getElementById('skillFilter').querySelector(`option[value="${s}"]`)) document.getElementById('skillFilter').value = s;
    })();
  </script>
</body>
</html>
